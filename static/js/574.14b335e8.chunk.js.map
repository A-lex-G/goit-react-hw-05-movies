{"version":3,"file":"static/js/574.14b335e8.chunk.js","mappings":"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","sources":["helpers.js","components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx","../node_modules/nanoid/index.browser.js","components/Cast&ReviewsList/Cast&ReviewsLinks.styled.jsx","components/Cast&ReviewsList/Cast&ReviewsLinks.jsx","pages/Movie.jsx"],"sourcesContent":["export const URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = '64aba4d0a2ac3bd79e8071c6bbb0c175';","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const StyledNavLink = styled(NavLink)`\n    display: block;\n    width: fit-content;\n    color: black;\n    text-decoration: none;\n    border: 3px solid transparent;\n    border-radius: 4px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n\n    :hover,\n    :focus {\n        color: darkblue;\n        font-weight: 500;\n        box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n        0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    }\n`","import PropTypes from 'prop-types';\nimport { StyledNavLink } from './BackLink.styled';\n\n\nexport const BackLink = ({ to }) => {\n    \n    return (\n        <StyledNavLink\n            to={to}>\n            Go back\n        </StyledNavLink>\n    )\n}\n\nBackLink.propTypes = {\n    to: PropTypes.object.isRequired,\n}","import styled from \"@emotion/styled\";\n\nexport const StyledMovieDetails = styled.div`\n    display: flex;\n    align-items: center;\n`\nexport const MovieImg = styled.img`\n    border: 1px solid transparent;\n    border-radius: 10px;\n`\n\nexport const MovieDiscription = styled.div`\n    padding: 10px;\n`\nexport const StyledGenresList = styled.ul`\n    display:flex;\n    column-gap: 10px;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n`","import { nanoid } from \"nanoid\";\nimport { StyledMovieDetails, MovieDiscription, MovieImg, StyledGenresList } from \"./MovieDetails.styled\";\n\nexport const MovieDetails = ({ src, alt, title, score, overview, genres }) => {\n    return (\n        <>\n            <StyledMovieDetails>\n                <MovieImg\n                    src={src}\n                    alt={alt}\n                />\n                <MovieDiscription>\n                    <h3>\n                        {title}\n                    </h3>\n                    <p>\n                        User score:\n                        {score}\n                    </p>\n                    <h4>\n                        Overview\n                    </h4>\n                    <p>\n                        {overview}\n                    </p>\n                    <h5>\n                        Genres\n                    </h5>\n                    <StyledGenresList>\n                        {genres.map(genre =>\n                        <li\n                            key={nanoid()}\n                        >\n                            {genre.name}\n                        </li>)\n                    }\n                    </StyledGenresList>\n                </MovieDiscription>\n            </StyledMovieDetails>        \n        </>\n    )\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const StyledNavLink = styled(NavLink)`\n    display: inline-block;\n    width: fit-content;\n    color: black;\n    text-decoration: none;\n    border: 3px solid transparent;\n    border-radius: 4px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    padding: 10px;\n\n    :hover,\n    :focus {\n        color: darkblue;\n        font-weight: 500;\n        box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n        0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n        }\n`\n\nexport const StyledNavList = styled.ul`\n    display: flex;\n    justify-content: flex-start;\n    padding: 0;\n    column-gap: 10px;\n    list-style: none;\n`","import { StyledNavLink } from \"./Cast&ReviewsLinks.styled\";\nimport { StyledNavList } from \"./Cast&ReviewsLinks.styled\";\n\nexport const OtherMoviDetails = () => {\n    return (\n        <>\n            <p>Additional information</p>\n            <StyledNavList>\n                <li>\n                    <StyledNavLink\n                        to='cast'\n                    >\n                        Cast\n                    </StyledNavLink>\n                </li>\n                <li>\n                    <StyledNavLink\n                        to='reviews'\n                    >\n                        Reviews\n                    </StyledNavLink>\n                </li>\n            </StyledNavList>\n        </>\n    )\n}","import { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Suspense, useEffect, useRef, useState } from \"react\";\nimport { URL, API_KEY } from \"helpers\";\nimport { BackLink } from \"components/BackLink/BackLink\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { MovieDetails } from \"components/MovieDetails/MovieDetails\";\nimport { OtherMoviDetails } from \"components/Cast&ReviewsList/Cast&ReviewsLinks\";\n\nconst Movie = () => {\n    const params = useParams();\n    const { movieId } = params;\n    const [image, setImage] = useState(null);\n    const [title, setTitle] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [overview, setOverview] = useState('');\n    const [score, setScore] = useState(null);\n    const location = useLocation();\n    const backLinkRef = useRef(location.state?.from ?? \"/movies\");\n\n    useEffect(() => {\n        async function getMovie() {\n            try {\n                const { data: { title, poster_path, genres, overview, vote_average } } = await axios.get(`${URL}movie/${movieId}?api_key=${API_KEY}`);\n                if (poster_path) {\n                    setImage(`https://image.tmdb.org/t/p/w200${poster_path}`);\n                }\n                setTitle(title);\n                setGenres(genres);\n                setOverview(overview);\n                setScore(vote_average);\n            } catch (error) {\n                console.error(error);\n            }\n        }\n        getMovie()\n    }, [movieId])\n\n    return (\n        <>\n            <BackLink\n                to={backLinkRef.current}\n            />\n            <MovieDetails\n                src={image}\n                alt={title}\n                title={title}\n                score={score}\n                overview={overview}\n                genres={genres}\n            />\n            <OtherMoviDetails />\n            <Suspense fallback={<Loader />}>\n                <Outlet/>\n            </Suspense>\n        </>\n    )\n}\n\nexport default Movie;"],"names":["URL","API_KEY","StyledNavLink","styled","NavLink","BackLink","to","StyledMovieDetails","MovieImg","MovieDiscription","StyledGenresList","MovieDetails","src","alt","title","score","overview","genres","map","genre","name","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","StyledNavList","OtherMoviDetails","movieId","useParams","useState","image","setImage","setTitle","setGenres","setOverview","setScore","location","useLocation","backLinkRef","useRef","state","from","useEffect","axios","data","poster_path","vote_average","console","error","getMovie","current","Suspense","fallback","Loader"],"sourceRoot":""}